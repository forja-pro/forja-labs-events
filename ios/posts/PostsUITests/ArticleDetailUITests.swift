import XCTest

// MARK: - UI Tests para ArticleDetail Scene
// UI Tests testam a interface do usu√°rio e intera√ß√µes reais do usu√°rio

final class ArticleDetailUITests: XCTestCase {
    
    var app: XCUIApplication!

    override func setUpWithError() throws {
        // Continuar executando testes mesmo se um falhar
        continueAfterFailure = false
        
        // Configurar a aplica√ß√£o
        app = XCUIApplication()
        
        // Configura√ß√µes especiais para UI Tests
        app.launchArguments = ["UI_TESTING"] // Flag para identificar que estamos em testes
        
        // Lan√ßar a aplica√ß√£o
        app.launch()
    }
    
    override func tearDownWithError() throws {
        app = nil
    }
    
    // MARK: - Teste 1: Verificar se a tela carrega corretamente
    func testArticleDetailScreenLoads() throws {
        // O que estamos testando: A tela de detalhes do artigo carrega
        
        // Verificar se a view principal existe
        let articleDetailView = app.scrollViews["article_detail_view"]
        XCTAssertTrue(articleDetailView.waitForExistence(timeout: 5), 
                     "A view de detalhes do artigo deveria existir")
        
        // Verificar se o t√≠tulo da navega√ß√£o est√° correto
        let navigationTitle = app.navigationBars["Article"]
        XCTAssertTrue(navigationTitle.exists, 
                     "O t√≠tulo da navega√ß√£o deveria ser 'Article'")
    }
    
    // MARK: - Teste 2: Verificar o estado de loading
    func testLoadingStateIsDisplayed() throws {
        // O que estamos testando: O estado de loading aparece enquanto carrega
        
        // Logo ap√≥s o launch, devemos ver o estado de loading
        let loadingProgress = app.activityIndicators["loading_progress"]
        let loadingText = app.staticTexts["loading_text"]
        
        // Verificar se elementos de loading aparecem rapidamente
        if loadingProgress.waitForExistence(timeout: 1) {
            XCTAssertTrue(loadingProgress.exists, 
                         "O indicador de loading deveria aparecer")
            XCTAssertTrue(loadingText.exists, 
                         "O texto de loading deveria aparecer")
            
            print("‚úÖ Estado de loading detectado com sucesso!")
        } else {
            print("‚ö†Ô∏è Loading muito r√°pido para ser detectado - isso √© OK!")
        }
    }
    
    // MARK: - Teste 3: Verificar se o conte√∫do carrega ap√≥s o loading
    func testArticleContentDisplaysAfterLoading() throws {
        // O que estamos testando: O conte√∫do do artigo aparece ap√≥s carregar
        
        // Aguardar o t√≠tulo aparecer (ap√≥s loading)
        let titleText = app.staticTexts["article_title"]
        XCTAssertTrue(titleText.waitForExistence(timeout: 10), 
                     "O t√≠tulo do artigo deveria aparecer ap√≥s o loading")
        
        // Verificar se o t√≠tulo cont√©m o texto esperado
        let titleValue = titleText.label
        XCTAssertFalse(titleValue.isEmpty, 
                      "O t√≠tulo n√£o deveria estar vazio")
        
        // Verificar se o autor aparece
        let authorText = app.staticTexts["article_author"]
        XCTAssertTrue(authorText.waitForExistence(timeout: 2), 
                     "O autor do artigo deveria aparecer")
        
        // Verificar se o autor cont√©m o texto esperado
        let authorValue = authorText.label
        XCTAssertTrue(authorValue.contains("By"), 
                     "O texto do autor deveria come√ßar com 'By'")
        
        print("‚úÖ Conte√∫do carregado - T√≠tulo: '\(titleValue)', Autor: '\(authorValue)'")
    }
    
    // MARK: - Teste 4: Verificar acessibilidade
    func testAccessibilityElements() throws {
        // O que estamos testando: Elementos t√™m labels de acessibilidade corretos
        
        // Aguardar conte√∫do carregar
        let titleText = app.staticTexts["article_title"]
        XCTAssertTrue(titleText.waitForExistence(timeout: 10))
        
        // Verificar labels de acessibilidade
        XCTAssertTrue(titleText.isAccessibilityElement, 
                     "O t√≠tulo deveria ser um elemento de acessibilidade")
        
        let authorText = app.staticTexts["article_author"]
        XCTAssertTrue(authorText.isAccessibilityElement, 
                     "O autor deveria ser um elemento de acessibilidade")
        
        print("‚úÖ Elementos de acessibilidade configurados corretamente!")
    }
    
    // MARK: - Teste 5: Verificar navega√ß√£o (se houver)
    func testNavigationElements() throws {
        // O que estamos testando: Elementos de navega√ß√£o funcionam
        
        // Verificar se existe bot√£o de voltar (se aplic√°vel)
        let navigationBar = app.navigationBars.firstMatch
        XCTAssertTrue(navigationBar.exists, 
                     "Barra de navega√ß√£o deveria existir")
        
        // Se houver bot√£o de voltar, testar
        let backButton = navigationBar.buttons.firstMatch
        if backButton.exists {
            print("‚úÖ Bot√£o de navega√ß√£o encontrado: \(backButton.label)")
        } else {
            print("‚ÑπÔ∏è Nenhum bot√£o de navega√ß√£o encontrado - tela inicial")
        }
    }
    
    // MARK: - Teste 6: Teste de scroll (se necess√°rio)
    func testScrollBehavior() throws {
        // O que estamos testando: A tela pode fazer scroll se necess√°rio
        
        let scrollView = app.scrollViews.firstMatch
        XCTAssertTrue(scrollView.exists, 
                     "ScrollView deveria existir")
        
        // Tentar fazer scroll para baixo
        scrollView.swipeUp()
        
        // Tentar fazer scroll para cima
        scrollView.swipeDown()
        
        // Verificar se ainda conseguimos ver os elementos
        let titleText = app.staticTexts["article_title"]
        XCTAssertTrue(titleText.exists, 
                     "T√≠tulo deveria continuar vis√≠vel ap√≥s scroll")
        
        print("‚úÖ Comportamento de scroll funcionando!")
    }
    
    // MARK: - Teste 7: Teste de performance da UI
    func testArticleLoadingPerformance() throws {
        // O que estamos testando: A tela carrega em tempo aceit√°vel
        
        measure {
            // Reiniciar a app para medir tempo de carregamento
            app.terminate()
            app.launch()
            
            // Aguardar o conte√∫do aparecer
            let titleText = app.staticTexts["article_title"]
            _ = titleText.waitForExistence(timeout: 10)
        }
        
        print("‚úÖ Teste de performance conclu√≠do!")
    }
    
    // MARK: - Teste 8: Teste de rota√ß√£o da tela
    func testScreenRotation() throws {
        // O que estamos testando: A tela funciona em orienta√ß√µes diferentes
        
        // Aguardar conte√∫do carregar em modo portrait
        let titleText = app.staticTexts["article_title"]
        XCTAssertTrue(titleText.waitForExistence(timeout: 10))
        
        // Rotacionar para landscape
        XCUIDevice.shared.orientation = .landscapeLeft
        
        // Aguardar um momento para a rota√ß√£o
        sleep(1)
        
        // Verificar se elementos ainda existem ap√≥s rota√ß√£o
        XCTAssertTrue(titleText.exists, 
                     "T√≠tulo deveria continuar vis√≠vel em landscape")
        
        let authorText = app.staticTexts["article_author"]
        XCTAssertTrue(authorText.exists, 
                     "Autor deveria continuar vis√≠vel em landscape")
        
        // Voltar para portrait
        XCUIDevice.shared.orientation = .portrait
        sleep(1)
        
        // Verificar novamente
        XCTAssertTrue(titleText.exists, 
                     "T√≠tulo deveria continuar vis√≠vel de volta em portrait")
        
        print("‚úÖ Rota√ß√£o da tela funcionando!")
    }
    
    // MARK: - Teste 9: Teste de interrup√ß√£o da app
    func testAppInterruption() throws {
        // O que estamos testando: A app lida bem com interrup√ß√µes
        
        // Aguardar conte√∫do carregar
        let titleText = app.staticTexts["article_title"]
        XCTAssertTrue(titleText.waitForExistence(timeout: 10))
        
        // Simular app indo para background
        XCUIDevice.shared.press(.home)
        
        // Aguardar um momento
        sleep(2)
        
        // Voltar para a app
        app.activate()
        
        // Verificar se o estado foi preservado
        XCTAssertTrue(titleText.exists, 
                     "Conte√∫do deveria estar preservado ap√≥s voltar do background")
        
        print("‚úÖ Gerenciamento de estado da app funcionando!")
    }
    
    // MARK: - Teste 10: Teste de m√∫ltiplos launches
    func testMultipleLaunches() throws {
        // O que estamos testando: A app funciona consistentemente
        
        for i in 1...3 {
            print("üîÑ Launch \(i)/3")
            
            app.terminate()
            app.launch()
            
            // Verificar se carrega corretamente a cada vez
            let titleText = app.staticTexts["article_title"]
            XCTAssertTrue(titleText.waitForExistence(timeout: 10), 
                         "T√≠tulo deveria carregar no launch \(i)")
            
            let authorText = app.staticTexts["article_author"]
            XCTAssertTrue(authorText.exists, 
                         "Autor deveria existir no launch \(i)")
        }
        
        print("‚úÖ M√∫ltiplos launches funcionando!")
    }
}
